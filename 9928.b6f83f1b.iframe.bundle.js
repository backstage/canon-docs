"use strict";(self.webpackChunk_backstage_canon=self.webpackChunk_backstage_canon||[]).push([[9928],{"../../node_modules/@base-ui-components/react/esm/checkbox/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{S:()=>index_parts_namespaceObject});var index_parts_namespaceObject={};__webpack_require__.r(index_parts_namespaceObject),__webpack_require__.d(index_parts_namespaceObject,{C:()=>CheckboxIndicator,b:()=>CheckboxRoot});var react=__webpack_require__("../../node_modules/react/index.js"),react_namespaceObject=__webpack_require__.t(react,2);const CheckboxGroupContext=react.createContext(void 0);function useCheckboxGroupContext(optional=!0){const context=react.useContext(CheckboxGroupContext);if(void 0===context&&!optional)throw new Error("Base UI: CheckboxGroupContext is missing. CheckboxGroup parts must be placed within <CheckboxGroup>.");return context}const DEFAULT_VALIDITY_STATE={badInput:!1,customError:!1,patternMismatch:!1,rangeOverflow:!1,rangeUnderflow:!1,stepMismatch:!1,tooLong:!1,tooShort:!1,typeMismatch:!1,valid:null,valueMissing:!1},NOOP=()=>{},FieldRootContext=react.createContext({invalid:void 0,controlId:void 0,setControlId:NOOP,labelId:void 0,setLabelId:NOOP,messageIds:[],setMessageIds:NOOP,name:void 0,validityData:{state:DEFAULT_VALIDITY_STATE,errors:[],error:"",value:"",initialValue:null},setValidityData:NOOP,disabled:void 0,touched:!1,setTouched:NOOP,dirty:!1,setDirty:NOOP,validate:()=>null,validationMode:"onBlur",validationDebounceTime:0,state:{disabled:!1,valid:null,touched:!1,dirty:!1},markedDirtyRef:{current:!1}});function useFieldRootContext(optional=!0){const context=react.useContext(FieldRootContext);if(context.setControlId===NOOP&&!optional)throw new Error("Base UI: FieldRootContext is missing. Field parts must be placed within <Field.Root>.");return context}function mergeReactProps(externalProps,...internalProps){let mergedInternalProps=internalProps[0];for(let i=1;i<internalProps.length;i+=1)mergedInternalProps=merge(mergedInternalProps,internalProps[i]);return merge(externalProps,mergedInternalProps)}function merge(externalProps,internalProps){return externalProps?Object.entries(externalProps).reduce(((acc,[key,value])=>("o"===key[0]&&"n"===key[1]&&key.charCodeAt(2)>=65&&key.charCodeAt(2)<=90&&"function"==typeof value?acc[key]=event=>{let isPrevented=!1;const theirHandler=value,ourHandler=internalProps[key],baseUIEvent=event;baseUIEvent.preventBaseUIHandler=()=>{isPrevented=!0};const result=theirHandler(baseUIEvent);return isPrevented||ourHandler?.(baseUIEvent),result}:"style"===key?(value||internalProps.style)&&(acc[key]={...internalProps.style,...value||{}}):"className"===key?value?internalProps.className?acc[key]=value+" "+internalProps.className:acc[key]=value:acc[key]=internalProps.className:acc[key]=value,acc)),{...internalProps}):internalProps}function useForkRef(...refs){return react.useMemo((()=>refs.every((ref=>null==ref))?null:instance=>{refs.forEach((ref=>{!function setRef(ref,value){"function"==typeof ref?ref(value):ref&&(ref.current=value)}(ref,instance)}))}),refs)}const majorVersion=parseInt(react.version,10);function useRenderPropForkRef(render,...refs){let childRef;return childRef="function"!=typeof render?function isReactVersionAtLeast(reactVersionToCheck){return majorVersion>=reactVersionToCheck}(19)?render.props.ref:render.ref:null,useForkRef(childRef,...refs)}var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const defaultRenderFunctions={button:props=>(0,jsx_runtime.jsx)("button",{type:"button",...props}),div:props=>(0,jsx_runtime.jsx)("div",{...props}),h2:props=>(0,jsx_runtime.jsx)("h2",{...props}),h3:props=>(0,jsx_runtime.jsx)("h3",{...props}),output:props=>(0,jsx_runtime.jsx)("output",{...props}),p:props=>(0,jsx_runtime.jsx)("p",{...props}),span:props=>(0,jsx_runtime.jsx)("span",{...props}),a:props=>(0,jsx_runtime.jsx)("a",{...props}),label:props=>(0,jsx_runtime.jsx)("label",{...props}),input:props=>(0,jsx_runtime.jsx)("input",{...props}),fieldset:props=>(0,jsx_runtime.jsx)("fieldset",{...props}),form:props=>(0,jsx_runtime.jsx)("form",{...props})};function useComponentRenderer(settings){const{render:renderProp,className:classNameProp,state,ref,propGetter=props=>props,extraProps,customStyleHookMapping}=settings,className=function resolveClassName(className,state){return"function"==typeof className?className(state):className}(classNameProp,state),ownProps={...react.useMemo((()=>function getStyleHookProps(state,customMapping){let props={};return Object.entries(state).forEach((([key,value])=>{if(customMapping?.hasOwnProperty(key)){const customProps=customMapping[key](value);null!=customProps&&(props={...props,...customProps})}else!0===value?props[`data-${key.toLowerCase()}`]="":value&&(props[`data-${key.toLowerCase()}`]=value.toString())})),props}(state,customStyleHookMapping)),[state,customStyleHookMapping]),...extraProps};let resolvedRenderProp;resolvedRenderProp="string"==typeof renderProp?defaultRenderFunctions[renderProp]:renderProp;const renderedElementProps=propGetter(ownProps),propsWithRef={...renderedElementProps,ref:useRenderPropForkRef(resolvedRenderProp,ref,renderedElementProps.ref)};void 0!==className&&(propsWithRef.className=className);return{renderElement:()=>function evaluateRenderProp(render,props,state){return"function"==typeof render?render(props,state):react.cloneElement(render,{...mergeReactProps(render.props,props),ref:props.ref})}(resolvedRenderProp,propsWithRef,state)}}let CheckboxRootDataAttributes=function(CheckboxRootDataAttributes){return CheckboxRootDataAttributes.checked="data-checked",CheckboxRootDataAttributes.unchecked="data-unchecked",CheckboxRootDataAttributes.disabled="data-disabled",CheckboxRootDataAttributes.readonly="data-readonly",CheckboxRootDataAttributes.required="data-required",CheckboxRootDataAttributes.valid="data-valid",CheckboxRootDataAttributes.invalid="data-invalid",CheckboxRootDataAttributes.touched="data-touched",CheckboxRootDataAttributes.dirty="data-dirty",CheckboxRootDataAttributes}({});function useCustomStyleHookMapping(state){return react.useMemo((()=>({checked:value=>state.indeterminate?{}:value?{[CheckboxRootDataAttributes.checked]:""}:{[CheckboxRootDataAttributes.unchecked]:""}})),[state.indeterminate])}const visuallyHidden={clip:"rect(0 0 0 0)",overflow:"hidden",whiteSpace:"nowrap",position:"fixed",top:0,left:0,border:0,padding:0,width:1,height:1,margin:-1};let globalId=0;const maybeReactUseId={...react_namespaceObject}.useId;function useId(idOverride,prefix){if(void 0!==maybeReactUseId){const reactId=maybeReactUseId();return idOverride??(prefix?`${prefix}-${reactId}`:reactId)}return function useGlobalId(idOverride,prefix="mui"){const[defaultId,setDefaultId]=react.useState(idOverride),id=idOverride||defaultId;return react.useEffect((()=>{null==defaultId&&(globalId+=1,setDefaultId(`${prefix}-${globalId}`))}),[defaultId,prefix]),id}(idOverride,prefix)}const useEnhancedEffect="undefined"!=typeof window?react.useLayoutEffect:react.useEffect;function useEventCallback(fn){const ref=react.useRef(fn);return useEnhancedEffect((()=>{ref.current=fn})),react.useRef(((...args)=>(0,ref.current)(...args))).current}const FormContext=react.createContext({formRef:{current:{fields:new Map}},errors:{},onClearErrors:()=>{}});function useFormContext(){return react.useContext(FormContext)}function getCombinedFieldValidityData(validityData,invalid){return{...validityData,state:{...validityData.state,valid:!invalid&&validityData.state.valid}}}const validityKeys=Object.keys(DEFAULT_VALIDITY_STATE);var react_dom=__webpack_require__("../../node_modules/react-dom/index.js");function useLatestRef(value){const ref=react.useRef(value);return useEnhancedEffect((()=>{ref.current=value})),ref}function useCheckboxRoot(params){const{id:idProp,checked:externalChecked,inputRef:externalInputRef,onCheckedChange:onCheckedChangeProp=(()=>{}),name,value,defaultChecked=!1,readOnly=!1,required=!1,autoFocus=!1,indeterminate=!1,disabled=!1}=params,groupContext=useCheckboxGroupContext(),groupValue=groupContext?.value,setGroupValue=groupContext?.setValue,defaultGroupValue=groupContext?.defaultValue,[checked,setCheckedState]=function useControlled({controlled,default:defaultProp,name,state="value"}){const{current:isControlled}=react.useRef(void 0!==controlled),[valueState,setValue]=react.useState(defaultProp);return[isControlled?controlled:valueState,react.useCallback((newValue=>{isControlled||setValue(newValue)}),[])]}({controlled:name&&groupValue?groupValue.includes(name):externalChecked,default:name&&defaultGroupValue?defaultGroupValue.includes(name):defaultChecked,name:"Checkbox",state:"checked"}),{labelId,setControlId,setTouched,setDirty,validityData}=useFieldRootContext(),buttonRef=react.useRef(null),{getValidationProps,getInputValidationProps,inputRef:inputValidationRef,commitValidation}=function useFieldControlValidation(){const{setValidityData,validate,messageIds,validityData,validationMode,validationDebounceTime,invalid,markedDirtyRef,controlId,state}=useFieldRootContext(),{formRef}=useFormContext(),timeoutRef=react.useRef(-1),inputRef=react.useRef(null);react.useEffect((()=>()=>{window.clearTimeout(timeoutRef.current)}),[]);const commitValidation=useEventCallback((async value=>{const element=inputRef.current;if(!element)return;window.clearTimeout(timeoutRef.current);const resultOrPromise=validate(value);let result=null;result="object"==typeof resultOrPromise&&null!==resultOrPromise&&"then"in resultOrPromise?await resultOrPromise:resultOrPromise;let errorMessage="";null!==result&&(errorMessage=Array.isArray(result)?result.join("\n"):result),element.setCustomValidity(errorMessage);const nextState=function getState(el){return validityKeys.reduce(((acc,key)=>(acc[key]=el.validity[key],el.validity.customError||markedDirtyRef.current||(acc[key]="valid"===key),acc)),{})}(element);let validationErrors=[];Array.isArray(result)?validationErrors=result:result?validationErrors=[result]:element.validationMessage&&(validationErrors=[element.validationMessage]);const nextValidityData={value,state:nextState,error:Array.isArray(result)?result[0]:result??element.validationMessage,errors:validationErrors,initialValue:validityData.initialValue};if(controlId){const currentFieldData=formRef.current.fields.get(controlId);currentFieldData&&formRef.current.fields.set(controlId,{...currentFieldData,...getCombinedFieldValidityData(nextValidityData,invalid)})}setValidityData(nextValidityData)})),getValidationProps=react.useCallback(((externalProps={})=>mergeReactProps(externalProps,{...messageIds.length&&{"aria-describedby":messageIds.join(" ")},...!1===state.valid&&{"aria-invalid":!0}})),[messageIds,state.valid]),getInputValidationProps=react.useCallback(((externalProps={})=>mergeReactProps(getValidationProps(externalProps),{onChange(event){if(event.nativeEvent.defaultPrevented)return;if(invalid||"onChange"!==validationMode)return;const element=event.currentTarget;""!==element.value?(window.clearTimeout(timeoutRef.current),validationDebounceTime?timeoutRef.current=window.setTimeout((()=>{commitValidation(element.value)}),validationDebounceTime):commitValidation(element.value)):commitValidation(element.value)}})),[getValidationProps,invalid,validationMode,validationDebounceTime,commitValidation]);return react.useMemo((()=>({getValidationProps,getInputValidationProps,inputRef,commitValidation})),[getValidationProps,getInputValidationProps,commitValidation])}(),onCheckedChange=useEventCallback(onCheckedChangeProp),id=function useBaseUiId(idOverride){return useId(idOverride,"base-ui")}(idProp);useEnhancedEffect((()=>(setControlId(id),()=>{setControlId(void 0)})),[id,setControlId]),function useField(params){const{formRef}=useFormContext(),{invalid,markedDirtyRef,validityData,setValidityData}=useFieldRootContext(),{value,id,controlRef,commitValidation}=params,getValueRef=useLatestRef(params.getValue);useEnhancedEffect((()=>{let initialValue=value;void 0===initialValue&&(initialValue=getValueRef.current?.()),null===validityData.initialValue&&initialValue!==validityData.initialValue&&setValidityData((prev=>({...prev,initialValue})))}),[setValidityData,value,validityData.initialValue,getValueRef]),useEnhancedEffect((()=>{id&&formRef.current.fields.set(id,{controlRef,validityData:getCombinedFieldValidityData(validityData,invalid),validate(){let nextValue=value;void 0===nextValue&&(nextValue=getValueRef.current?.()),markedDirtyRef.current=!0,react_dom.flushSync((()=>commitValidation(nextValue)))}})}),[commitValidation,controlRef,formRef,getValueRef,id,invalid,markedDirtyRef,validityData,value])}({id,commitValidation,value:checked,controlRef:buttonRef});const inputRef=react.useRef(null),mergedInputRef=useForkRef(externalInputRef,inputRef,inputValidationRef);react.useEffect((()=>{inputRef.current&&(inputRef.current.indeterminate=indeterminate)}),[indeterminate]);const getButtonProps=react.useCallback(((externalProps={})=>mergeReactProps(getValidationProps(externalProps),{id,ref:buttonRef,type:"button",role:"checkbox",disabled,"aria-checked":indeterminate?"mixed":checked,"aria-readonly":readOnly||void 0,"aria-labelledby":labelId,onBlur(){const element=inputRef.current;element&&(setTouched(!0),commitValidation(element.checked))},onClick(event){event.defaultPrevented||readOnly||(event.preventDefault(),inputRef.current?.click())}})),[id,getValidationProps,indeterminate,checked,disabled,readOnly,labelId,setTouched,commitValidation]),getInputProps=react.useCallback(((externalProps={})=>mergeReactProps(getInputValidationProps(externalProps),{checked,disabled,name,...void 0!==value?{value}:{},required,autoFocus,ref:mergedInputRef,style:visuallyHidden,tabIndex:-1,type:"checkbox","aria-hidden":!0,onChange(event){if(event.nativeEvent.defaultPrevented)return;const nextChecked=event.target.checked;if(setDirty(nextChecked!==validityData.initialValue),setCheckedState(nextChecked),onCheckedChange?.(nextChecked,event.nativeEvent),name&&groupValue&&setGroupValue){const nextGroupValue=nextChecked?[...groupValue,name]:groupValue.filter((item=>item!==name));setGroupValue(nextGroupValue,event.nativeEvent)}}})),[getInputValidationProps,checked,disabled,name,value,required,autoFocus,mergedInputRef,setDirty,validityData.initialValue,setCheckedState,onCheckedChange,groupValue,setGroupValue]);return react.useMemo((()=>({checked,getButtonProps,getInputProps})),[checked,getButtonProps,getInputProps])}const CheckboxRootContext=react.createContext(void 0);const CheckboxRoot=react.forwardRef((function CheckboxRoot(props,forwardedRef){const{name,onCheckedChange,defaultChecked,parent=!1,readOnly=!1,indeterminate=!1,required=!1,disabled:disabledProp=!1,checked:checkedProp,render,className,inputRef,value,...otherProps}=props,groupContext=useCheckboxGroupContext(),parentContext=groupContext?.parent,isGrouped=parentContext&&groupContext.allValues;let groupProps={};isGrouped&&(parent?groupProps=groupContext.parent.getParentProps():name&&(groupProps=groupContext.parent.getChildProps(name)));const{checked:groupChecked=checkedProp,indeterminate:groupIndeterminate=indeterminate,onCheckedChange:groupOnChange=onCheckedChange,...otherGroupProps}=groupProps,{state:fieldState,disabled:fieldDisabled}=useFieldRootContext(),disabled=fieldDisabled||groupContext?.disabled||disabledProp,{checked,getInputProps,getButtonProps}=useCheckboxRoot({...props,disabled,inputRef,checked:groupChecked,indeterminate:groupIndeterminate,onCheckedChange:groupOnChange}),computedChecked=isGrouped?Boolean(groupChecked):checked,computedIndeterminate=isGrouped?groupIndeterminate:indeterminate;react.useEffect((()=>{parentContext&&name&&parentContext.disabledStatesRef.current.set(name,disabled)}),[parentContext,disabled,name]);const state=react.useMemo((()=>({...fieldState,checked:computedChecked,disabled,readOnly,required,indeterminate:computedIndeterminate})),[fieldState,computedChecked,disabled,readOnly,required,computedIndeterminate]),customStyleHookMapping=useCustomStyleHookMapping(state),{renderElement}=useComponentRenderer({propGetter:getButtonProps,render:render??"button",ref:forwardedRef,state,className,customStyleHookMapping,extraProps:{...otherProps,...otherGroupProps}});return(0,jsx_runtime.jsxs)(CheckboxRootContext.Provider,{value:state,children:[renderElement(),!checked&&props.name&&(0,jsx_runtime.jsx)("input",{type:"hidden",name:props.name,value:"off"}),(0,jsx_runtime.jsx)("input",{...getInputProps()})]})}));function useAfterExitAnimation(parameters){const{open,animatedElementRef,onFinished:onFinishedParam}=parameters,onFinished=useEventCallback(onFinishedParam),runOnceAnimationsFinish=function useAnimationsFinished(ref){const frameRef=react.useRef(-1),cancelFrames=useEventCallback((()=>{cancelAnimationFrame(frameRef.current)}));return react.useEffect((()=>cancelFrames),[cancelFrames]),useEventCallback((fnToExecute=>{cancelFrames();const element=ref.current;element&&("function"!=typeof element.getAnimations||globalThis.BASE_UI_ANIMATIONS_DISABLED?fnToExecute():frameRef.current=requestAnimationFrame((()=>{Promise.allSettled(element.getAnimations().map((anim=>anim.finished))).then((()=>{react_dom.flushSync(fnToExecute)}))})))}))}(animatedElementRef),openRef=useLatestRef(open);useEnhancedEffect((()=>{open||runOnceAnimationsFinish((function callOnFinished(){openRef.current||onFinished()}))}),[open,openRef,runOnceAnimationsFinish,onFinished])}const STARTING_HOOK={"data-starting-style":""},ENDING_HOOK={"data-ending-style":""},transitionStatusMapping={transitionStatus:value=>"starting"===value?STARTING_HOOK:"ending"===value?ENDING_HOOK:null},CheckboxIndicator=react.forwardRef((function CheckboxIndicator(props,forwardedRef){const{render,className,keepMounted=!1,...otherProps}=props,rootState=function useCheckboxRootContext(){const context=react.useContext(CheckboxRootContext);if(void 0===context)throw new Error("Base UI: CheckboxRootContext is missing. Checkbox parts must be placed within <Checkbox.Root>.");return context}(),rendered=rootState.checked||rootState.indeterminate,{mounted,transitionStatus,setMounted}=function useTransitionStatus(open,delayStartingStatus=!1){const[transitionStatus,setTransitionStatus]=react.useState(),[mounted,setMounted]=react.useState(open);return open&&!mounted&&(setMounted(!0),"starting"===transitionStatus||delayStartingStatus||setTransitionStatus("starting")),!open&&mounted&&"ending"!==transitionStatus&&setTransitionStatus("ending"),open||mounted||"ending"!==transitionStatus||setTransitionStatus(void 0),useEnhancedEffect((()=>{if(!open)return;delayStartingStatus&&setTransitionStatus("starting");const frame=requestAnimationFrame((()=>{setTransitionStatus(void 0)}));return()=>{cancelAnimationFrame(frame)}}),[open,delayStartingStatus]),react.useMemo((()=>({mounted,setMounted,transitionStatus})),[mounted,transitionStatus])}(rendered),indicatorRef=react.useRef(null),mergedRef=useForkRef(forwardedRef,indicatorRef),state=react.useMemo((()=>({...rootState,transitionStatus})),[rootState,transitionStatus]);useAfterExitAnimation({open:rendered,animatedElementRef:indicatorRef,onFinished(){setMounted(!1)}});const baseStyleHookMapping=useCustomStyleHookMapping(rootState),customStyleHookMapping=react.useMemo((()=>({...baseStyleHookMapping,...transitionStatusMapping})),[baseStyleHookMapping]),{renderElement}=useComponentRenderer({render:render??"span",ref:mergedRef,state,className,customStyleHookMapping,extraProps:{hidden:!mounted,...otherProps}});return keepMounted||rendered?renderElement():null}))}}]);